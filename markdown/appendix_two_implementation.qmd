---
title: "Appendix B: Implementing OVB Model Methods in R"
bibliography: robust_se_refs.bib
output:
  html_document:
    toc: true
    toc_depth: 2
    toc_float: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
knitr::opts_knit$set(root.dir = here::here())
```

## Introduction

To demonstrate the simplicity of the approaches outlined in the manuscript, here we present an analysis of a single simulated data set that stems from the simulations in the text. We have provided a data file (Supplementary Data 1) for ease of use[^1]. To start, we will load a few libraries. If you do not have them installed already, you can do so via `install.packages()` or substitute `pacman::p_load()` for `library()` below after installing `pacman`.

[^1]: Of note, we generated it using the functions `make_environment()` piped to `make_plots()` in Appendix A. We set a seed to make a reproducible example. The number for the seed was generated by `TeachingDemos::char2seed("OVB")` which translated to 834.

For those not familiar with the packages used in this example, here we describe what purpose each one serves. We will use `dplyr` for making sure columns are of the right class and for the action of calculating group meand and anomalies. `purrr` will be used to automate some summary output creation later in the script. `lme4` will be used to fit linear mixed effects models. Last, `broom.mixed` is a wonderful package that generates easily readable output from mixed models.

```{r}
# libraries
library(dplyr)
library(purrr)
library(lme4)
library(broom.mixed)
```


```{r, make_data}
#| echo: false
#| eval: false
source("scripts/ovb_temp_snail_funs.R")

set.seed(TeachingDemos::char2seed("OVB"))

dat <- make_environment() |>
  make_plots() |>
  dplyr::select(site, year, plot_temp, snails) |>
  rename(temp = plot_temp)

readr::write_csv(dat, "data/sim_snails_seed_ovb.csv")
```

First, we will load the data and turn the site variable into a character. We note that it is common to forget to make items like 'site' into categorical variables, and this can have disastrous consequences. We then output the first six lines of the data to show what it looks like. Interested readers are welcome to explore using other methods (we are fans of the `visdat` and `skimr` packages as well as just using `str()`).

```{r, load_data}
dat <- read.csv("data/sim_snails_seed_ovb.csv") |>
  mutate(site = as.character(site))

head(dat)
```


## Models

With the data as shown above, we can now fit a naive linear model that does not incorporate site using `lm()`. We can then fit an Random Effects form of the model with site as the RE using `lmer()` from `lme4`.

```{r, naive_and_mixed}
mod_naive <- lm(snails ~ temp, data = dat)

mod_re <- lmer(snails ~ temp + (1|site),
               data = dat)
```

To fit an Econometric Fixed Effects model, we can again use `lm()` and incorporate site as a Fixed Effect predictor.

```{r, fe}
mod_fe <- lm(snails ~ temp + site, data = dat)
```

To see the dummy coding of the FE, try `model.matrix(mod_fe)`.

We can implement a FE model using the Fixed Effects Transformation as well. To do this, we group by site and then calculate the site-level anomaly for both snails and temperature. We then fit the linear model with `lm()` examining the relationship between these two site-level anomalies.

```{r, fe_trans}
dat <- dat |>
  group_by(site) |>
  mutate(snail_site_anom = snails - mean(snails),
         temp_site_anom = temp - mean(temp)) |>
  ungroup()

# FE Transformation Model
mod_fe_trans <- lm(snail_site_anom ~ temp_site_anom, data = dat)
```

For the Group Mean Covariate (Mundlak) model and the Group Mean Centered model, we need to calculate a mean temperature by site. Then we can fit both models with that mean as a hierarchical predictor and a random effect of site using `lmer()`.

```{r, corr_err_mods}

dat <- dat |>
  group_by(site) |>
  mutate(site_mean_temp = mean(temp)) |>
  ungroup()

# Group Mean Covariate Model
mod_gmcov <- lmer(snails ~ temp + site_mean_temp + (1|site),
                  data = dat)

# Group Mean Centered Model
mod_gmcent <- lmer(snails ~ temp_site_anom + site_mean_temp + (1|site),
                  data = dat)
```


## Comparison

Let's compare the performance of these different models as estimators of the temperature effect. Here, we create a named list of models, and then use `purrr::map()` functions along with `tidy()` from `broom` and `broom.mixed` to get well formatted output.

```{r, comparison}
mods <- list(mod_naive = mod_naive, 
             mod_re = mod_re, 
             mod_fe = mod_fe,
             mod_fe_trans = mod_fe_trans,
             mod_gmcov = mod_gmcov,
             mod_gmcent = mod_gmcent)

out <- map(mods, tidy) |>
  map_dfr(~ .x |> select(term, estimate, std.error),
          .id = "model") |>
  filter(term %in% c("temp", "temp_site_anom"))

out
```


## Robust Standard Errors

Robust standard errors are of use in a great many cases. If errors are hetergeneous between groups, have temporal autocorrelation, or other issues, they can be very used [see @abadie_when_2017, @cameron_practitioners_2015, and @oshchepkov_bridging_2022 for an introduction and when and where to use them]. In R, two main ways to use them are either via the `sandwich` package along with `lmtest` or to fit them with the `fixest` package.

```{r, rse_libs}
library(lmtest)
library(sandwich)
library(fixest)
```

We can look at the SE for the temperature effect from `mod_fe` first with no correction, then the Huber-White correction from `sandwich`, and finally we can fit the same model using `fixest::feols()`, which uses slightly different syntax for incorporating fixed effects, and also output the Huber-White correction.

```{r, robust_se}
# No correction
tidy(mod_fe) |>
  filter(term == "temp")


# Huber-White SE via Sandwich
coeftest(mod_fe, vcov = vcovCL(mod_fe, 
                               cluster = ~ site,
                                type = "HC0")) |>
  tidy() |>
  filter(term == "temp")

# Using fixest for Huber-White correction with feols
feols(snails ~ temp | site, 
      vcov = "cluster",
      data = dat) |>
  tidy()

```

### References

::: {#refs}
:::
